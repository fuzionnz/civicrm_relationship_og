<?php

/**
 * Implements hook_menu().
 */
function civicrm_relationship_og_menu() {
  return array(
    'admin/config/civicrm/relationship-og' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('civicrm_relationship_og_settings_form'),
      'access arguments' => array('administer group'),
      'title' => 'Civicrm Relationship / OG Synchronization',
    ),
    'admin/config/civicrm/relationship-og/delete/%' => array(
      'page callback' => '_civicrm_relationship_og_delete_mapping',
      'page arguments' => array(5),
      'access arguments' => array('administer group'),
      'type' => MENU_CALLBACK,
    ),
    'admin/config/civicrm/relationship-og/contacts' => array(
      'page callback' => '_civicrm_relationship_og_contacts_autocomplete',
      'access arguments' => array('administer group'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_civicrm_post().
 */
function civicrm_relationship_og_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if ($objectName != 'Relationship') {
    return;
  }

  // If the relationship has been enabled or disabled, we treat that the same
  // as if it were created or deleted.
  switch (TRUE) {
    case $op == 'create' && $objectRef->is_active:
    case $op == 'edit' && $objectRef->is_active:
      _civicrm_relationship_og_toggle('add', $objectRef->contact_id_a, $objectRef->contact_id_b, $objectRef->relationship_type_id);
      break;
    case $op == 'delete':
    case $op == 'edit' && !$objectRef->is_active:
      _civicrm_relationship_og_toggle('remove', $objectRef->contact_id_a, $objectRef->contact_id_b, $objectRef->relationship_type_id);
      break;
  }
}

/**
 * Implements hook_civicrm_enableDisable().
 *
 * This hook is called when the relationship is enabled or disabled.
 */
function civicrm_relationship_og_civicrm_enableDisable($recordBAO, $recordId, $isActive) {
  if ($recordBAO != 'CRM_Contact_BAO_Relationship' || !civicrm_initialize()) {
    return;
  }

  $relationship = civicrm_api('relationship', 'getSingle', array(
    'version' => 3,
    'id' => $recordId,
  ));
  if (!empty($relationship['is_error'])) {
    return;
  }

  $toggle = $isActive ? 'add' : 'remove';
  _civicrm_relationship_og_toggle($toggle, $relationship['contact_id_a'], $relationship['contact_id_b'], $relationship['relationship_type_id']);
}

/**
 * The workhorse function which is called by the above hooks and, if appropriate, adds or
 * removes Drupal users to a mapped organic group.
 */
function _civicrm_relationship_og_toggle($toggle, $contact_id_a, $contact_id_b, $relationship_type_id) {
  // Attempt to load the Drupal account of contact a of the relationship and any
  // mapped Organic Groups for this particular relationship/contact_b pair.
  $account = _civicrm_relationship_og_load_user($contact_id_a);

  // Search to see if the relationship/contact_b pairing matches any active mappings.
  $gids = db_query("
    SELECT gid FROM {og_civicrm_relationship}
    WHERE relationship_id = :relationship_id
    AND (contact_b = :contact_b OR contact_b IS NULL)
    GROUP BY gid
  ", array(':relationship_id' => $relationship_type_id, ':contact_b' => $contact_id_b))->fetchCol();

  if (empty($account) || empty($gids)) {
    return;
  }

  // We've got at least one active mapping. We either add user to the Organic Group
  // or check to see if they can be removed.
  switch ($toggle) {
    case 'add':
      foreach ($gids as $gid) {
        og_group('node', $gid, array('entity' => $account));
      }
      break;
    case 'remove':
      foreach ($gids as $gid) {
        // We don't want to remove OG membership if there are other active mappings
        // keeping a user in an OG. So we'll run an exhaustive search.

        // First get all current civicrm relationships of the user.
        // This *should* exclude the relationship that has just been deleted/disabled.
        if (($relationships = _civicrm_relationship_og_get_relationships($contact_id_a)) === FALSE) {
          // Civicrm error. Should probably log to watchdog.
          break;
        }

        if (!empty($relationships)) {
          // Now we want to search the table for any mappings.
          $query = db_select('og_civicrm_relationship', 'ogr')
            ->fields('ogr', array('gid'))
            ->condition('ogr.gid', (int) $gid);

          $db_or = db_or();
          foreach ($relationships as $relationship) {
            // We're after something like:
            // OR (relationship_id = 1 AND (contact_b = 3 OR contact_b IS NULL)) OR...
            $contact_b_cond = db_or()
              ->condition('ogr.contact_b', (int) $relationship['contact_id_b'])
              ->isNull('ogr.contact_b');

            $mapping_cond = db_and()
              ->condition($contact_b_cond)
              ->condition('ogr.relationship_id', (int) $relationship['relationship_type_id']);

            // No append the condition to our OR chain.
            $db_or->condition($mapping_cond);
          }

          $count = $query->condition($db_or)
            ->countQuery()
            ->execute()
            ->fetchField();
        }

        if (empty($relationships) || $count == 0) {
          og_ungroup('node', $gid, 'user', $account->uid);
        }
      }
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * In a civicrm multisite setup, another Drupal frontend may update relationships, eg. as part
 * of a scheduled job. This means the above hooks won't be called. So we also have to do a full,
 * periodic sync.
 */
function civicrm_relationship_og_cron() {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  // Get full list of mappings
  $result = db_query("SELECT gid, relationship_id, contact_b FROM {og_civicrm_relationship}");

  // Group mappings by OG
  $groups = array();
  foreach ($result as $row) {
    $groups[$row->gid][] = $row;
  }

  // Get full membership of each OG
  foreach ($groups as $gid => $group) {
    $expected_users = array();

    foreach ($group as $mapping) {
      $values = array(
        'relationship_type_id' => $mapping->relationship_id,
        'is_active' => TRUE,
        'version' => 3,
        'options' => array(
          'limit' => 500,
        ),
      );
      // Not all mappings have a contact_b field.
      if ($mapping->contact_b) {
        $values['contact_id_b'] = $mapping->contact_b;
      }
      $relationships = civicrm_api('Relationship', 'get', $values);

      if (!empty($relationships['is_error'])) {
        continue;
      }

      foreach ($relationships['values'] as $relationship) {
        $uid = _civicrm_relationship_og_load_user($relationship['contact_id_a'], TRUE);
        if ($uid) {
          $expected_users[$uid] = $uid;
        }
      }
    }

    // We have our list of the users we would expect in the organic group $gid.
    // Now let's compare with actual users and synchronize the list.
    $actual_users = og_get_group_members_properties(node_load($gid), array(), '', 'node');

    // Add missing users from group
    foreach (array_diff($expected_users, $actual_users) as $uid) {
      watchdog('civicrm_relationship_og', 'Add user %uid to OG %gid during cron.', array('%uid' => $uid, '%gid' => $gid));
      og_group('node', $gid, array('entity' => $uid));
    }

    // Remove extraneous users from group
    foreach (array_diff($actual_users, $expected_users) as $uid) {
      watchdog('civicrm_relationship_og', 'Remove user %uid from OG %gid during cron.', array('%uid' => $uid, '%gid' => $gid));
      og_ungroup('node', $gid, 'user', $uid);
    }
  }
}

/**
 * Page callbacks and form helpers
 */

function civicrm_relationship_og_settings_form($form, &$form_state) {
  $relationship_types = _civicrm_relationship_og_get_relationship_types();
  $groups = _civicrm_relationship_og_get_ogs();

  $form = array();
  $form['new'] = array(
    '#type' => 'fieldset',
    '#title' => 'Create new mapping',
    '#collapsible' => TRUE,
    'new_form' => array(
      'relationship' => array(
        '#type' => 'select',
        '#title' => 'Civicrm relationship',
        '#options' => $relationship_types,
        '#required' => TRUE,
      ),
      'group' => array(
        '#type' => 'select',
        '#title' => 'Organic group',
        '#options' => $groups,
        '#required' => TRUE,
      ),
      'contact_b' => array(
        '#type' => 'textfield',
        '#title' => 'Contact B',
        '#autocomplete_path' => 'admin/config/civicrm/relationship-og/contacts',
        '#description' => t('Optional. If blank, this mapping will match all contacts with this relationship.')
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => 'Save',
      ),
    ),
  );

  $results = db_query("SELECT id, gid, relationship_id, contact_b FROM {og_civicrm_relationship}")->fetchAll();
  $header = array('Organic Group', 'Civicrm Relationship', 'Contact B', 'Delete');
  $rows = array();

  if (!empty($results)) {
    // If there at least one result, default to a collapsed form
    $form['new']['#collapsed'] = TRUE;

    foreach ($results as $result) {
      $contact_name = '';
      if ($contact = _civicrm_relationship_og_get_contact($result->contact_b)) {
        $contact_name = $contact['display_name'];
      }

      $rows[] = array(
        l("{$groups[$result->gid]}", "node/{$result->gid}") . " [nid:{$result->gid}]",
        "{$relationship_types[$result->relationship_id]} [id:{$result->relationship_id}]",
        "$contact_name" . (empty($result->contact_b) ? '*' : " [id:{$result->contact_b}]"),
        l('delete', "admin/config/civicrm/relationship-og/delete/{$result->id}"),
      );
    }
  }
  else {
    $rows[] = array(
      array('data' => "No mappings yet exist.", 'colspan' => 4)
    );
  }
  $form['mappings'] = array(
    '#type' => 'markup',
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $form;
}

function civicrm_relationship_og_settings_form_validate($form, &$form_state) {
  // Try to extract contact_b id unless contact_b is empty
  $contact_b = $form_state['values']['contact_b'];
  if (!empty($contact_b)) {
    $matches = array();
    preg_match('/.*\[id:(\d+)\]/', $contact_b, $matches);

    if (empty($matches[1])) {
      form_set_error('contact_b', "Contact b must be in the form of 'John Smith [id:1234]'");
    }
    else {
      form_set_value($form['new']['new_form']['contact_b'], $matches[1], $form_state);
    }
  }
}

function civicrm_relationship_og_settings_form_submit($form, &$form_state) {
  $record = array(
    'gid' => (int) $form_state['values']['group'],
    'relationship_id' => (int) $form_state['values']['relationship'],
  );

  // If contact_b is empty, omit it so that we default to a NULL record in the database field.
  $contact_b = (int) $form_state['values']['contact_b'];
  if (!empty($contact_b)) {
    $record['contact_b'] = $contact_b;
  }

  try {
    drupal_write_record('og_civicrm_relationship', $record);
    _civicrm_relationship_og_populate_group($record['gid'], $record['relationship_id'], $contact_b);
  }
  catch (PDOException $e) {
    # Do nothing.
  }
}

function _civicrm_relationship_og_delete_mapping($id) {
  $query = db_delete('og_civicrm_relationship')
    ->condition('id', $id)
    ->execute();

  drupal_goto('admin/config/civicrm/relationship-og');
}

function _civicrm_relationship_og_contacts_autocomplete($string) {
  if (!civicrm_initialize()) {
    drupal_exit();
  }

  $result = civicrm_api('contact', 'get', array(
    'version' => 3,
    'display_name' => "%{$string}%",
  ));

  if (!empty($result['is_error'])) {
    drupal_exit();
  }

  $contacts = array();
  foreach ($result['values'] as $value) {
    $name = "{$value['display_name']} [id:{$value['id']}]";
    $contacts[$name] = check_plain($name);
  }

  drupal_json_output($contacts);
}

/**
 * Populate an Organic group with all users who fulfil a particular relationship
 */
function _civicrm_relationship_og_populate_group($gid, $relationship_id, $contact_b) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  $options = array(
    'version' => 3,
    'relationship_type_id' => $relationship_id,
    'is_active' => 1,
    'options' => array(
      'limit' => 500,
    ),
  );
  if (!empty($contact_b)) {
    $options['contact_id_b'] = $contact_b;
  }

  $results = civicrm_api('relationship', 'get', $options);
  if (!empty($results['is_error'])) {
    return FALSE;
  }

  // Extract contact id array from relationship query
  $contacts = array();
  foreach ($results['values'] as $relationship) {
    $contacts[$relationship['contact_id_a']] = $relationship['contact_id_a'];
  }

  // Add contacts with Drupal accounts to OG
  foreach ($contacts as $contact) {
    $account = _civicrm_relationship_og_load_user($contact);
    if ($account) {
      og_group('node', $gid, array('entity' => $account));
    }
  }
}

/**
 * Helper functions
 */

function _civicrm_relationship_og_load_user($contact_id, $uid_only = FALSE) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  // Get current domain
  $domain = civicrm_api('domain', 'getsingle', array(
    'version' => 3,
    'current_domain' => 1,
  ));
  if (!empty($domain['is_error'])) {
    return FALSE;
  }

  $uf_match = civicrm_api('uf_match', 'getsingle', array(
    'version' => 3,
    'contact_id' => $contact_id,
    'domain_id' => $domain['id'],
  ));
  if (!empty($uf_match['is_error'])) {
    return FALSE;
  }

  // Load the user, whether or not $uid_only is true,
  // so that we can determine whether the user still exists in Drupal.
  // This is because entries in the civicrm_uf_match table might not be updated
  // if the drupal user is deleted.
  $user = user_load($uf_match['uf_id']);
  if (!$user) {
    return FALSE;
  }

  if ($uid_only) {
    return $uf_match['uf_id'];
  }
  return $user;
}

function _civicrm_relationship_og_get_relationship_types() {
  if (!civicrm_initialize()) {
    return array();
  }

  $relationship_types = civicrm_api('relationship_type', 'get', array(
    'version' => 3,
    'is_active' => 1,
    'options' => array(
      'limit' => 500,
    ),
  ));
  if (!empty($relationship_types['is_error'])) {
    return array();
  }

  $options = array();
  foreach ($relationship_types['values'] as $relationship_type) {
    $options[$relationship_type['id']] = $relationship_type['label_a_b'] . " | " . $relationship_type['label_b_a'];
  }
  return $options;
}

function _civicrm_relationship_og_get_ogs($nids = array()) {
  if (empty($nids)) {
    $nids = og_get_all_group();
  }
  $nodes = node_load_multiple($nids);
  
  $options = array();
  foreach ($nodes as $node) {
    $options[$node->nid] = $node->title;
  }
  return $options;
}

function _civicrm_relationship_og_get_contact($contact_id) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  $result = civicrm_api('contact', 'getsingle', array(
    'version' => 3,
    'id' => $contact_id,
  ));

  if (!empty($result['is_error'])) {
    return FALSE;
  }

  return $result;
}

function _civicrm_relationship_og_get_relationships($contact_id) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  $result = civicrm_api('relationship', 'get', array(
    'version' => 3,
    'contact_id_a' => $contact_id,
    'is_active' => 1,
  ));

  if (!empty($result['is_error'])) {
    return FALSE;
  }

  return $result['values'];
}
